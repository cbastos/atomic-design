{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}

import request from 'superagent';

/* eslint space-unary-ops:0 */
/* eslint no-trailing-spaces:0 */
/* eslint camelcase:0 */
/* eslint eol-last:0 */

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export default class {{&className}} {
    constructor(domain = '{{&domain}}', logger) {
        this.errorHandlers = [];
        this.domain = domain;
        this.logger = logger;
    }

    addErrorHandler(handler) {
        if(typeof handler !== 'function') throw new Error('You should register a function as error handler');
        this.errorHandlers.push(handler);
    }

    request(method, url, body, headers, queryParameters, form, reject, resolve) {
        if(this.logger) {
          this.logger.log(`Call ${method} ${url}`);
        }

        const req = request(method, url).query(queryParameters);

        Object.keys(headers).forEach(key => req.set(key, headers[key]));

        if(body) {
            req.send(body);
        }
        
        if(typeof (body) === 'object' && !(body.constructor.name === 'Buffer')) {
            req.set('Content-Type', 'application/json');
        }

        if(Object.keys(form).length > 0) {
            req.type('form');
            req.send(form);
        }

        req.end((error, response) => {
            if(error || !response.ok) {
                reject(error);
                this.errorHandlers.forEach(handler => handler(error));
            } else {
                resolve(response);
            }
        });
    }

{{#methods}}
    {{> method}}
    
{{/methods}}
}
